"""Update schema

Revision ID: 2b6508c9bc66
Revises: 
Create Date: 2024-09-25 19:38:47.861895

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2b6508c9bc66'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('add',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('button_text', sa.String(length=32), nullable=False),
    sa.Column('link_text', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_add_id'), 'add', ['id'], unique=False)
    op.drop_table('spins')
    op.drop_table('_prisma_migrations')
    op.drop_index('AppData_title_key', table_name='AppData')
    op.drop_table('AppData')
    op.drop_index('_AccountToTask_AB_unique', table_name='_AccountToTask')
    op.drop_index('_AccountToTask_B_index', table_name='_AccountToTask')
    op.drop_constraint('_AccountToTask_B_fkey', '_AccountToTask', type_='foreignkey')
    op.drop_constraint('_AccountToTask_A_fkey', '_AccountToTask', type_='foreignkey')
    op.create_foreign_key(None, '_AccountToTask', 'tasks', ['B'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, '_AccountToTask', 'accounts', ['A'], ['id'], ondelete='CASCADE')
    op.drop_index('accounts_inviteCode_key', table_name='accounts')
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=True)
    op.create_unique_constraint(None, 'accounts', ['inviteCode'])
    op.alter_column('farms', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('farms', 'status',
               existing_type=postgresql.ENUM('Process', 'Done', name='FarmStatuses'),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.create_index(op.f('ix_farms_wallet'), 'farms', ['wallet'], unique=False)
    op.create_unique_constraint(None, 'farms', ['id'])
    op.create_index(op.f('ix_reffers_accounts_id'), 'reffers_accounts', ['id'], unique=False)
    op.create_index(op.f('ix_reffers_accounts_oneWhoInvited'), 'reffers_accounts', ['oneWhoInvited'], unique=False)
    op.alter_column('rewards', 'coinsCount',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('rewards', 'ticketCount',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tasks', 'icon',
               existing_type=postgresql.ENUM('Telegram', 'X', 'Instagram', name='TaskIcon'),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('tasks', 'type',
               existing_type=postgresql.ENUM('General', 'Partners', 'Daily', name='TaskType'),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('tasks', 'link',
               existing_type=sa.TEXT(),
               nullable=True,
               existing_server_default=sa.text("''::text"))
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.drop_column('tasks', 'amountType')
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('REGULAR', 'ADMIN', 'MANAGER', 'INFLUENCER', name='Roles'),
               type_=sa.String(length=255),
               existing_nullable=False,
               existing_server_default=sa.text('\'REGULAR\'::"Roles"'))
    op.drop_index('users_username_key', table_name='users')
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=False)
    op.drop_constraint('users_partner_fkey', 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'partners', ['partner'], ['inviteCode'])
    op.add_column('wallets', sa.Column('wallet_address', sa.Text(), nullable=True))
    op.add_column('wallets', sa.Column('wallet_type', sa.String(length=255), nullable=True))
    op.create_index(op.f('ix_wallets_id'), 'wallets', ['id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_wallets_id'), table_name='wallets')
    op.drop_column('wallets', 'wallet_type')
    op.drop_column('wallets', 'wallet_address')
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('users_partner_fkey', 'users', 'partners', ['partner'], ['inviteCode'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.create_index('users_username_key', 'users', ['username'], unique=True)
    op.alter_column('users', 'role',
               existing_type=sa.String(length=255),
               type_=postgresql.ENUM('REGULAR', 'ADMIN', 'MANAGER', 'INFLUENCER', name='Roles'),
               existing_nullable=False,
               existing_server_default=sa.text('\'REGULAR\'::"Roles"'))
    op.add_column('tasks', sa.Column('amountType', postgresql.ENUM('Coin', 'Ticket', name='TaskAmountType'), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.alter_column('tasks', 'link',
               existing_type=sa.TEXT(),
               nullable=False,
               existing_server_default=sa.text("''::text"))
    op.alter_column('tasks', 'type',
               existing_type=sa.String(length=255),
               type_=postgresql.ENUM('General', 'Partners', 'Daily', name='TaskType'),
               existing_nullable=False)
    op.alter_column('tasks', 'icon',
               existing_type=sa.String(length=255),
               type_=postgresql.ENUM('Telegram', 'X', 'Instagram', name='TaskIcon'),
               existing_nullable=False)
    op.alter_column('rewards', 'ticketCount',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('rewards', 'coinsCount',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index(op.f('ix_reffers_accounts_oneWhoInvited'), table_name='reffers_accounts')
    op.drop_index(op.f('ix_reffers_accounts_id'), table_name='reffers_accounts')
    op.drop_index(op.f('ix_partners_inviteCode'), table_name='partners')
    op.create_index('partners_name_key', 'partners', ['name'], unique=True)
    op.create_index('partners_inviteCode_key', 'partners', ['inviteCode'], unique=True)
    op.drop_constraint(None, 'farms', type_='unique')
    op.drop_index(op.f('ix_farms_wallet'), table_name='farms')
    op.alter_column('farms', 'status',
               existing_type=sa.String(length=255),
               type_=postgresql.ENUM('Process', 'Done', name='FarmStatuses'),
               existing_nullable=False)
    op.alter_column('farms', 'id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'accounts', type_='unique')
    op.drop_index(op.f('ix_accounts_id'), table_name='accounts')
    op.create_index('accounts_inviteCode_key', 'accounts', ['inviteCode'], unique=True)
    op.drop_constraint(None, '_AccountToTask', type_='foreignkey')
    op.drop_constraint(None, '_AccountToTask', type_='foreignkey')
    op.create_foreign_key('_AccountToTask_A_fkey', '_AccountToTask', 'accounts', ['A'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('_AccountToTask_B_fkey', '_AccountToTask', 'tasks', ['B'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_index('_AccountToTask_B_index', '_AccountToTask', ['B'], unique=False)
    op.create_index('_AccountToTask_AB_unique', '_AccountToTask', ['A', 'B'], unique=True)
    op.create_table('AppData',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='AppData_pkey')
    )
    op.create_index('AppData_title_key', 'AppData', ['title'], unique=True)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    op.create_table('spins',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('Ticket', 'Coin', name='SpinPrizes'), autoincrement=False, nullable=False),
    sa.Column('wallet', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['wallet'], ['wallets.id'], name='spins_wallet_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='spins_pkey')
    )
    op.drop_index(op.f('ix_add_id'), table_name='add')
    op.drop_table('add')
    # ### end Alembic commands ###
